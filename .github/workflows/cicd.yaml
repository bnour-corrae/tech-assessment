name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - development

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: "409542052437"
#  ECR_REPOSITORY: 409542052437.dkr.ecr.us-east-1.amazonaws.com/wv-ecr
#  ECS_SERVICE: wv-vehicle-catalog
#  ECS_CLUSTER: wv-cluster
#  ECS_TASK_DEFINITION: terraform/files/task-definitions.json
  CONTAINER_NAME: vehicle-catalog
  AWS_ECR_REPO: "409542052437.dkr.ecr.us-east-1.amazonaws.com/wv-ecr"

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17 for x64
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          architecture: x64

      - name: Run Maven verify
        run: mvn verify

      - name: Configure AWS Credentials
        if: github.ref == 'refs/heads/main'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/github-access
          role-session-name: "github-ecr"
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        if: github.ref == 'refs/heads/main'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ${{
              format('{0}.dkr.ecr.{1}.{2}/{3}:{4}',
              env.AWS_ACCOUNT_ID,
              env.AWS_REGION,
              env.AWS_ECR_REPO,
              github.repository,
              github.sha)
            }}

#      - name: Fill in the new image ID in the Amazon ECS task definition
#        id: task-def
#        if: github.ref == 'refs/heads/main'
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: ${{ env.ECS_TASK_DEFINITION }}
#          container-name: ${{ env.CONTAINER_NAME }}
#          image: ${{ steps.build-image.outputs.image }}
#
#      - name: Deploy Amazon ECS task definition
#        if: github.ref == 'refs/heads/main'
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: ${{ env.ECS_SERVICE }}
#          cluster: ${{ env.ECS_CLUSTER }}
#          wait-for-service-stability: true
